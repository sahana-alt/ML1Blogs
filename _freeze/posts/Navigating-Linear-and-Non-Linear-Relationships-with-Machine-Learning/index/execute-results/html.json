{
  "hash": "c96ae08e497e629b852a0891e6335201",
  "result": {
    "markdown": "---\ntitle: Navigating Linear and Non-Linear Relationships with Machine Learning\nimage: image.png\nauthor: Sahana Bhaskar\ndate: '2023-11-06'\ncategories:\n  - regression\n  - supervised learning\nformat:\n  html:\n    code-fold: true\n    code-tools: true\n---\n\nUnderstanding the relationship between variables is a cornerstone of data analysis. In the realm of machine learning, linear and non-linear regression models are pivotal tools for deciphering these relationships. In this blog post, we'll explore both linear and non-linear regression, complete with a practical example using a real-world dataset. We will implement these concepts in Python and use data visualization to enhance our understanding.\n\n# Linear Regression: Unraveling Linear Relationships\nLinear regression is a method to model the linear relationship between a dependent variable and one or more independent variables. It's widely used for its simplicity and efficiency.\n\n## Real-World Example: Housing Prices\nLet's consider a scenario where we predict housing prices based on various features like size, number of rooms, and age of the house. We'll use a dataset containing these features and corresponding house prices.\n\n### Step 1: Import Libraries and Load Data\n\n::: {.cell execution_count=1}\n``` {.python .cell-code}\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.ensemble import RandomForestRegressor\nfrom sklearn.metrics import mean_squared_error\n\n\n# Load dataset\nhousing_data = pd.read_csv('Housing.csv')\n```\n:::\n\n\n### Step 2: Preparing the Data\n\n::: {.cell execution_count=2}\n``` {.python .cell-code}\nX = housing_data[['area']]\ny = housing_data['price']\n# Initialize the Random Forest Regressor\nfrom sklearn.preprocessing import LabelEncoder\n\n# creating instance of labelencoder\nlabelencoder = LabelEncoder()\nhousing_data['mainroad'] = labelencoder.fit_transform(housing_data['mainroad'])\nhousing_data['guestroom'] = labelencoder.fit_transform(housing_data['guestroom'])\nhousing_data['hotwaterheating'] = labelencoder.fit_transform(housing_data['hotwaterheating'])\nhousing_data['parking'] = labelencoder.fit_transform(housing_data['parking'])\nhousing_data['airconditioning'] = labelencoder.fit_transform(housing_data['airconditioning'])\nhousing_data['furnishingstatus'] = labelencoder.fit_transform(housing_data['furnishingstatus'])\nhousing_data['basement'] = labelencoder.fit_transform(housing_data['basement'])\nhousing_data['prefarea'] = labelencoder.fit_transform(housing_data['prefarea'])\n\n\n# Splitting the data\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2)\n```\n:::\n\n\n### Step 3: Linear Regression Model\n\n::: {.cell execution_count=3}\n``` {.python .cell-code}\n# Initialize and train the model\nlinear_model = LinearRegression()\nlinear_model.fit(X_train, y_train)\n\n# Predicting the prices\ny_pred = linear_model.predict(X_test)\n```\n:::\n\n\n### Step 4: Visualization\n@fig-linear shows the plot of the actual and predicted housing prices\n\n::: {.cell execution_count=4}\n``` {.python .cell-code}\nplt.figure(figsize=(10,6))\nplt.scatter(X_test['area'], y_test, color='blue', label='Actual')  # Actual values\nplt.scatter(X_test['area'], y_pred, color='red', label='Predicted')\nplt.plot(X_test['area'], y_pred, color='black', label='Predicted Line')\n# plt.scatter(X, y)\nplt.xlabel('Area')\nplt.ylabel('Price')\nplt.title('Actual vs Predicted Housing Prices')\nplt.legend()\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![Actual and Predicted Prices](index_files/figure-html/fig-linear-output-1.png){#fig-linear width=812 height=523}\n:::\n:::\n\n\nLinear and non-linear regression models are powerful tools in machine learning for understanding and predicting relationships between variables. While linear models offer simplicity and are easy to interpret, non-linear models capture more complex patterns and can provide more accurate predictions in certain scenarios.\nIn our examples, linear regression helped us understand housing prices and their variation with the area of the houses\n\n# Delving Into Non-Linear Regression: Predicting Housing Prices with Random Forests\nWhen it comes to predicting real estate prices, the complexity and variability of influencing factors make it an ideal candidate for non-linear regression models. One of the most robust and versatile non-linear models is the Random Forest. In this blog post, we'll explore how to use a Random Forest regressor, a type of ensemble learning method, to predict housing prices. We'll walk through the process with a sample dataset, complete with Python code and data visualization.\n\n## Random Forest: A Non-Linear Powerhouse\nRandom Forest is an ensemble learning method, primarily used for classification and regression. It works by constructing a multitude of decision trees at training time and outputting the mean prediction of the individual trees for regression tasks. This method is highly effective due to its ability to capture complex non-linear relationships in data.\n\n## Predicting Housing Prices with Random Forest\nTo demonstrate the Random Forest in action, let's consider a housing dataset that includes various features like house size, number of rooms, age, location, and other relevant factors, along with the house prices.\n\n### Step 1: Setting Up the Environment\nFirst, let’s import the necessary Python libraries and load our dataset:\n\n::: {.cell execution_count=5}\n``` {.python .cell-code}\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.ensemble import RandomForestRegressor\nfrom sklearn.metrics import mean_squared_error\n```\n:::\n\n\n### Step 2: Preparing the Data\nWe'll select our features and target variable (house price) and split the data into training and testing sets:\n\n::: {.cell execution_count=6}\n``` {.python .cell-code}\nX = housing_data.drop('price', axis=1)\ny = housing_data['price']\n\n# Split the dataset into training and test sets\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42)\n```\n:::\n\n\n### Step 3: Building and Training the Random Forest Model\nNow, we'll create and train our Random Forest regressor:\n\n::: {.cell execution_count=7}\n``` {.python .cell-code}\nrf_regressor = RandomForestRegressor(n_estimators=1000, random_state=42)\n\n# Train the model\nrf_regressor.fit(X_train, y_train)\n```\n\n::: {.cell-output .cell-output-display execution_count=15}\n```{=html}\n<style>#sk-container-id-2 {color: black;}#sk-container-id-2 pre{padding: 0;}#sk-container-id-2 div.sk-toggleable {background-color: white;}#sk-container-id-2 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-2 label.sk-toggleable__label-arrow:before {content: \"▸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-2 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-2 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-2 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-2 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-2 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-2 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"▾\";}#sk-container-id-2 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-2 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-2 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-2 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-2 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-2 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-2 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-2 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-2 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-2 div.sk-item {position: relative;z-index: 1;}#sk-container-id-2 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-2 div.sk-item::before, #sk-container-id-2 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-2 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-2 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-2 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-2 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-2 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-2 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-2 div.sk-label-container {text-align: center;}#sk-container-id-2 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-2 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-2\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>RandomForestRegressor(n_estimators=1000, random_state=42)</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-2\" type=\"checkbox\" checked><label for=\"sk-estimator-id-2\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">RandomForestRegressor</label><div class=\"sk-toggleable__content\"><pre>RandomForestRegressor(n_estimators=1000, random_state=42)</pre></div></div></div></div></div>\n```\n:::\n:::\n\n\n### Step 4: Making Predictions and Evaluating the Model\nWe use our trained model to predict house prices and evaluate its performance:\n\n::: {.cell execution_count=8}\n``` {.python .cell-code}\n# Making predictions\ny_pred = rf_regressor.predict(X_test)\n\n# Evaluating the model\nmse = mean_squared_error(y_test, y_pred)\nprint(f'Mean Squared Error: {mse}')\n\nfrom sklearn.metrics import r2_score\nr2 = r2_score(y_test, y_pred)\nprint(f'Co-efficient of regression: {r2}')\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nMean Squared Error: 1821573390511.917\nCo-efficient of regression: 0.577006987790502\n```\n:::\n:::\n\n\n### Step 5: Visualizing the Results\nA scatter plot (@fig-non-linear) can help visualize how well our predicted values compare against the actual values:\n\n::: {.cell execution_count=9}\n``` {.python .cell-code}\nplt.figure(figsize=(10,6))\nplt.scatter(y_test, y_pred)\nplt.xlabel('Actual Prices')\nplt.ylabel('Predicted Prices')\nplt.title('Actual vs Predicted Housing Prices')\nplt.plot([y_test.min(), y_test.max()], [y_test.min(), y_test.max()], 'k--', lw=3)\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![Distribution of actual and predicted prices](index_files/figure-html/fig-non-linear-output-1.png){#fig-non-linear width=812 height=523}\n:::\n:::\n\n\nFor each prediction, calculate the standard deviation of the outputs from all individual trees in the forest. This gives a measure of how much variance there is in the predictions from the different trees.\nThis plot will give you an idea of the spread of predictions for each data point, indicating where the model is more or less certain about its predictions.\n\n# Conclusion\nThe Random Forest regressor is a powerful tool for tackling complex non-linear regression tasks like housing price prediction. Its ability to handle a large number of features and capture complex, non-linear relationships makes it an excellent choice for real-world prediction scenarios.\nIn our example, we've seen how the Random Forest model can be used to predict housing prices based on various features. The scatter plot visualization further aids in understanding the accuracy of our model, showcasing the effectiveness of Random Forests in handling such complex data.\nRemember, while Random Forest is a robust model, it's essential to tune its parameters like the number of trees (n_estimators) for optimal performance. Additionally, feature selection and preprocessing can significantly impact the model's effectiveness.\n\n",
    "supporting": [
      "index_files"
    ],
    "filters": [],
    "includes": {
      "include-in-header": [
        "<script src=\"https://cdnjs.cloudflare.com/ajax/libs/require.js/2.3.6/require.min.js\" integrity=\"sha512-c3Nl8+7g4LMSTdrm621y7kf9v3SDPnhxLNhcjFJbKECVnmZHTdo+IRO05sNLTH/D3vA6u1X32ehoLC7WFVdheg==\" crossorigin=\"anonymous\"></script>\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/jquery/3.5.1/jquery.min.js\" integrity=\"sha512-bLT0Qm9VnAYZDflyKcBaQ2gg0hSYNQrJ8RilYldYQ1FxQYoCLtUjuuRuZo+fjqhx/qtq/1itJ0C2ejDxltZVFg==\" crossorigin=\"anonymous\"></script>\n<script type=\"application/javascript\">define('jquery', [],function() {return window.jQuery;})</script>\n"
      ]
    }
  }
}